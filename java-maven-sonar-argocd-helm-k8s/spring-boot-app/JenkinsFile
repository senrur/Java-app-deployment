pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://54.157.18.102:9000"
        SONAR_TOKEN = credentials('sonar')
    }
     // steps {
       // withCredentials([string(credentialsId: '2', variable: 'SONAR_AUTH_TOKEN')]) {
         // sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
       // }
      //}
   steps {
     withCredentials() {
         sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
      }
     }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "abishek/senthil2409aws:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            withDockerRegistry(credentialsId: '61a1d6f3-9ebc-4e89-8665-04ecd5b104b6', url: 'https://index.docker.io/v1/') {
    // some block
            sh 'docker push ${DOCKER_IMAGE}'
            sh 'docker rm ${DOCKER_IMAGE}'
          }
        }
      }
    }
}
}
