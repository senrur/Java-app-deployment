pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  environment{
    SCANNER_HOME = tool 'sonar-scanner'
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      steps {
         withSonarQubeEnv('sonarserver') {
    // some block
           sh '''cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && $SCANNER_HOME/sonar-scanner -Dsonar.projectName=abishek \
               -Dsonar.java.binaries=. \
               -Dsonar.projectKey=abishek '''
          }
        }
     }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "abishek/senthil2409aws:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            withDockerRegistry(credentialsId: 'f95b6622-f73d-4f02-ab03-490bdf5d7d1a', url: 'https://index.docker.io/v1/') {
    // some block
            sh 'docker push ${DOCKER_IMAGE}'
            sh 'docker rm ${DOCKER_IMAGE}'
          }
        }
      }
    }
}
}
